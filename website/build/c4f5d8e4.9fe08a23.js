(window.webpackJsonp=window.webpackJsonp||[]).push([[21,7],{77:function(e,t,n){"use strict";n.r(t);var a=n(0),o=n.n(a),r=n(91),s=n(100),c=(n(126),n(95)),i=n(89),l=n(128),m=n.n(l),u="\n- Easy to learn\n- Not limited to React\n- Extensive Typescript support\n- Small bundle size\n- Doesn't need any middleware for async\n- Computed values\n- Deeply nested states\n- Transient updates\n- Destructure state without losing reactivity\n- Same API for local and global state\n- Finite state machines\n  ",d="\n    ",p=[{text:"### Intuitive & Familiar API\n\nProvides a similar API to **Recoil**. \nExcept, in the second argument of `create` method, you can specify actions for your store. Also, you can create derived stores with computed values.\n\n",code:"import { create, set } from 'xoid'\n\nconst numberActions = (store) => ({\n  increment: () => set(store, (s) => s + 1),\n  decrement: () => set(store, (s) => s - 1)\n})\nconst alpha = create(3, numberActions)\nconst beta = create(4, numberActions)\n\n// derived state\nconst sum = create(get => get(alpha) + get(beta))\n"},{text:"\n### React & Vanilla\n\nNo need for wrapping components into context providers. \nJust import `useStore` and start using! You can also use `use` method to access the actions of a store, without causing rerenders. (it's not a hook)\n\n",code:"import { useStore, use, subscribe } from 'xoid'\n\n// in a React component\nconst [number, { increment, decrement }] = useStore(alpha)\n\n// use the actions only, without causing rerender\nconst { increment, decrement } = use(alpha)\n\n// outside React\nconst unsubscribe = subscribe(alpha, a => console.log(a))\n"},{text:'\n### No more selector functions!\n\nEvery store is a *representation* of state, with the same tree structure as the state. \nYou can even subscribe to "primitives" like strings or numbers.\n\n',code:"import { create, useStore } from 'xoid'\n\nconst store = create({ name: 'John', surname: 'Doe' })\n\n// in a React component\nconst [name, setName] = useStore(store.name)\n"},{text:"\n### No more hand-written reducers!\n\nWith `set` method, you can surgically modify the parts in your state.\nThis means that you can modify deeply nested values without having to write a lot of code, or without using tools like **immer** or **immutablejs**.\n\n",code:"import { create, get, set } from 'xoid'\n\nconst store = create({ deeply: { nested: { foo: 5 } } })\nconst foo = store.deeply.nested.foo\n\nconsole.log(get(foo)) // 5\n\n// set the value surgically into the store\nset(foo, 25)\n\nconsole.log(get(store)) // { deeply: { nested: { foo: 25 } } }\n"},{text:"\n### Nested Stores \nYou can store your application's data as deeply nested structures without worrying about UI performance. While using `useStore` hook, **xoid** never automatically subscribes to child stores.\n\n",code:"import { create, set } from 'xoid'\n\nconst store = create({ title: 'hello', oftenUpdatingChildStore: create(0) })\nsetInterval(() => set(store.oftenUpdatingChildStore, (count) => count + 1, 50)\n\n// In a React component\nconst [state] = useStore(store)\n// a child store is subscribed, only if it's read\nconsole.log(state.oftenUpdatingChildStore)\n"},{text:"\n### No-API Finite State Machines!\nNo additional syntax is required to define and use finite state machines. Just use the second argument of the callback as the state transition function.\n\n",code:"import { create, useStore } from 'xoid'\n\nconst machine = create((get, set) => {\n  const red = { color: '#f00', onClick: () => set(green) }\n  const green = { color: '#0f0', onClick: () => set(red) }\n  return red\n})\n\n// in a React component\nconst [{ color, onClick }] = useStore(machine)\nreturn <div style={{ color }} onClick={onClick}/>\n"},{text:"\n### Models \nPerhaps, the most powerful feature of **xoid** is this one. Here's an example of easy state (de)serialization. (Your plain JSON data comes alive with your pre-defined actions in your model schemas) \n\nAnother benefit of using models are builtin `add` and `remove` actions. They are present in the actions by default if a store is created via `arrayOf` or `objectOf` helpers. These builtin actions have 100% consistent TypeScript types with your model schemas.\n\n",code:"import { create, arrayOf, get, set, use } from 'xoid'\n\nconst EmployeeModel = (payload) => create(\n  { name: payload.name }, \n  (store) => ({ greet: () => console.log(`Hey ${get(store.name)}!`) })\n)\n\nconst CompanyModel = (payload) => create({\n  name: payload.name,\n  employees: arrayOf(EmloyeeModel, payload.employees),\n})\n\nconst companyStore = CompanyModel({\n  name: 'my-awesome-company',\n  employees: [{ name: 'you' }, { name: 'me' }]\n})\n\nuse(companyStore.employees[0]).greet() // Hey you!\n\nconst myName = companyStore.employees[1].name\nconsole.log(get(myName)) // 'me'\nset(myName, 'my new name')\nconsole.log(get(myName)) // 'my new name'\n\nuse(companyStore.employees).add({ name: 'third employee'})\nuse(companyStore.employees[2]).greet() // Hey third employee!\n\n// remove by key, or by a filter function\nuse(companyStore.employees).remove(2)\nuse(companyStore.employees).remove(item => item.name === 'third employee')\n\n// if `employees` was an \"objectOf(EmployeeModel)\"\nuse(companyStore.employees).add({ name: 'third employee'}, '0000')\nuse(companyStore.employees).remove('0000')\nuse(companyStore.employees).remove(item => item.name === 'third employee')"}];function y(e){var t=e.href,n=e.type,a=void 0===n?"primary":n,r=e.target,s=e.children;return o.a.createElement("a",{className:"ActionButton "+a,href:t,target:r},s)}function h(e){e.title;var t=e.text,n=e.moreContent;return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{dangerouslySetInnerHTML:{__html:t}}),n)}function f(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(y,{type:"primary",href:Object(i.a)("docs/getting-started"),target:"_self"},"Get started"),o.a.createElement(y,{type:"secondary",href:Object(i.a)("docs/examples"),target:"_self"},"Examples"))}function g(e){var t=e.element,n=void 0===t?"section":t,a=e.children,r=e.className,s=e.background,c=void 0===s?"light":s,i=n;return o.a.createElement(i,{className:"Section "+r+" "+c},a)}function v(e){var t=e.columnOne,n=e.columnTwo,a=e.reverse;return o.a.createElement("div",{className:"TwoColumns "+(a?"reverse":"")},o.a.createElement("div",{className:"column first "+(a?"right":"left")},t),o.a.createElement("div",{className:"column last "+(a?"left":"right")},n))}function b(){return o.a.createElement(g,{background:"none",className:"HeaderHero"},o.a.createElement("div",{className:"titleContainer"},o.a.createElement("div",{className:"title"},o.a.createElement("img",{alt:"xoid",src:Object(i.a)("img/xoid-black.png"),height:"90px",style:{margin:"auto"}})),o.a.createElement("p",{className:"tagline"},"Scalable, fine-grained, and minimal state-management library for React and vanilla JavaScript"),o.a.createElement("div",{className:"buttons"},o.a.createElement(f,null))))}function E(){return o.a.createElement(g,{className:"NativeApps",background:"light"},o.a.createElement("div",{className:"FeatureSection"},o.a.createElement("div",{dangerouslySetInnerHTML:{__html:m()(u)}}),o.a.createElement("div",{dangerouslySetInnerHTML:{__html:m()(d)}})))}function S(e){return o.a.createElement(g,{className:"NativeCode",background:e.tint?"tint":"light"},o.a.createElement(v,{columnOne:o.a.createElement(h,{text:m()(e.content.text)}),columnTwo:o.a.createElement(s.a,{language:"jsx"},e.content.code)}))}t.default=function(){return o.a.createElement(r.a,{wrapperClassName:"homepage"},o.a.createElement(c.a,null,o.a.createElement("title",null,"xoid \xb7 Scalable state-management library for React and vanilla")),o.a.createElement(b,null),o.a.createElement(E,null),p.map((function(e,t){return o.a.createElement(S,{content:e,tint:!(t%2)})})))}},91:function(e,t,n){"use strict";var a=n(0),o=n.n(a),r=n(99),s=n(87),c=function(){var e=Object(s.useLocation)().pathname;return e.endsWith("/")?o.a.createElement(s.Redirect,{to:e.slice(0,-1)}):e.endsWith(".html")?o.a.createElement(s.Redirect,{to:e.slice(0,-5)}):null};t.a=function(e){return o.a.createElement(o.a.Fragment,null,o.a.createElement(c,null),o.a.createElement(r.a,e))}}}]);